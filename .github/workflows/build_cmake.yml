name: CMake

on: [push, pull_request]

env:
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "~/.conan2"

jobs:
  docker:
    name: Test docker images
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Build docker-ci image
        shell: bash
        run: cd docker && ./build-ci-image.sh

      - name: Build docker-dev image
        shell: bash
        run: cd docker && ./build-dev-image.sh

      - name: Build .devcontainer docker image
        shell: bash
        run: cd .devcontainer && DOCKER_BUILDKIT=1 docker build -t devcontainer:latest .

  linux:
    name: ${{ matrix.os }}, ${{ matrix.compiler.name }}, C++${{ matrix.cxx }}, ${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # 'false' means Don't stop matrix workflows even if some matrix entry fails.
      matrix:
        os: [ubuntu-24.04]
        buildtype: [debug]
        compiler: [ {name: 'GCC 14', preset: gcc-14, pkgs: 'gcc-14 g++-14 lib32gcc-14-dev gcc-multilib'},
                    {name: 'Clang 17', preset: clang-17, pkgs: 'clang-17 llvm-17'},
                    {name: 'Clang 18', preset: clang-18, pkgs: 'clang-18 llvm-18'}
                  ]
        cxx: [20, 23]

    steps:
    - uses: actions/checkout@v4

    - name: Cache
      uses: actions/cache@v4
      env:
        cache-name: cache-conan-modules
      with:
        path: |
          ${{ env.CONAN_USER_HOME }}
          ~/.cache/pip
          ~/.ccache
        key: ${{ runner.os }}-${{ matrix.cxx }}-${{ matrix.compiler.preset }}-${{ matrix.buildtype }}-${{ hashFiles('conanfile.py') }}

    - name: Install conan
      shell: bash
      run: |
        python3 -m pip install --upgrade pip setuptools conan
        source ~/.profile

    - name: Install dependencies
      run:   |
             sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
             sudo apt update
             sudo apt install ninja-build ${{ matrix.compiler.pkgs }} ccache
      shell: bash

    - name: Configure via CMake
      shell: bash
      run: cmake --preset unixlike-${{ matrix.compiler.preset }}-${{ matrix.buildtype }} -DCXX_STANDARD=${{ matrix.cxx }}

    - name: Build
      shell: bash
      run:  cmake --build --preset build-unixlike-${{ matrix.compiler.preset }}-${{ matrix.buildtype }}

    - name: Test
      shell: bash
      run: ctest --preset test-unixlike-${{ matrix.compiler.preset }}-${{ matrix.buildtype }}

  linux-static_analysis:
    name: Static Analysis, ${{ matrix.os }}, ${{ matrix.compiler.name }}, ${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # 'false' means Don't stop matrix workflows even if some matrix entry fails.
      matrix:
        os: [ubuntu-24.04]
        buildtype: [debug]
        compiler: [{name: 'Clang 17', preset: clang-17, pkgs: 'clang-17 llvm-17 llvm-17-dev libclang-17-dev', iwyu_branch: 'clang_17', path_prefix: "/usr/lib/llvm-17"}]
        cxx: [20, 23]

    steps:
    - uses: actions/checkout@v4

    - name: Cache
      uses: actions/cache@v4
      env:
        cache-name: cache-conan-modules
      with:
        path: |
          ${{ env.CONAN_USER_HOME }}
          ~/.cache/pip
          ~/.ccache
        key: ${{ runner.os }}-${{ matrix.cxx }}-${{ matrix.compiler.preset }}-${{ matrix.buildtype }}-${{ hashFiles('conanfile.py') }}

    - name: Install conan
      shell: bash
      run: |
        python3 -m pip install --upgrade pip setuptools conan
        source ~/.profile

    - name: Install dependencies
      run:   |
             sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
             sudo apt update
             sudo apt install ninja-build ${{ matrix.compiler.pkgs }} cppcheck  ccache
      shell: bash

    - name: Compile and install IWYU
      run:   |
             mkdir iwyu && cd iwyu
             git clone https://github.com/include-what-you-use/include-what-you-use.git
             cd include-what-you-use
             git checkout ${{ matrix.compiler.iwyu_branch }}
             cd ..
             mkdir build && cd build
             cmake -G "Ninja" -DCMAKE_PREFIX_PATH=${{ matrix.compiler.path_prefix }} ../include-what-you-use
             ninja
             sudo ninja install
      shell: bash

    - name: Configure via CMake
      shell: bash
      run: cmake --preset unixlike-${{ matrix.compiler.preset }}-${{ matrix.buildtype }}-static-analysis -DCXX_STANDARD=${{ matrix.cxx }}

    - name: Build
      shell: bash
      run:  cmake --build --preset build-unixlike-${{ matrix.compiler.preset }}-${{ matrix.buildtype }}-static-analysis
